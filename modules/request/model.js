import mongoose from "mongoose";

const RequestSchema = new mongoose.Schema(
  {
    customNo: { type: Number, default: 1 },
    isActive: { type: Boolean, default: true },
    passiveDesc: { type: String, required: false },
    patient: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Patient",
    },
    lpName: { type: String, required: false },
    lp: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "LandingPage",
    },
    name: { type: String, required: false },
    phone: { type: String, required: false },
    email: { type: String, required: false },
    message: { type: String, required: false },
    status: { type: String, required: false },
    oldStatus: { type: String, required: false },
    duplicate: { type: Number, required: false },
    duplicate_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    newForm_date: { type: Date, required: false },
    newForm_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    formInput: { type: String, required: false },
    formSource: { type: String, required: false },
    treatmentGroup: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "TreatmentGroup",
    },
    treatment: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Treatment",
    },
    customTreatment: { type: String, required: false },
    hotel: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Hotel",
    },
    hotelStartDate: { type: Date, required: false },
    hotelEndDate: { type: Date, required: false },
    hotelNote: { type: String, required: false },
    package: { type: String, required: false },

    notes: {
      type: [mongoose.Schema.Types.ObjectId],
      default: [],
      ref: "Note",
    },
    tickets: {
      type: [mongoose.Schema.Types.ObjectId],
      default: [],
      ref: "Ticket",
    },
    arrivalDate: { type: Date, required: false },
    stays: { type: Array, required: false, default: [] },
    bag: { type: String, required: false },
    demand_date: { type: Date, required: false },
    be_standby_time: { type: Date, required: false },
    demand_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    rep_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    meetingDateConfirmDate: { type: Date, required: false },
    meetingDate: { type: Date, required: false },
    meetingDate_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    standby_date: { type: Date, required: false },
    standby_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    continue_date: { type: Date, required: false },
    continue_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    consultation_date: { type: Date, required: false },
    consultation_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    price_date: { type: Date, required: false },
    price_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    priceNoteCategory:{ type: String, required: false },
    priceNoteType:{ type: String, required: false },
    priceNoteDate:{ type: Date, required: false },
    priceNoteNote:{ type: String, required: false },
    priceNote_user:{
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    price: { type: Number, required: false },
    currency: { type: String, required: false },
    prePaymentDate: { type: Date, required: false },
    prePaymentTotal: { type: Number, required: false },
    prePaymentType: { type: String, required: false },
    prePaymentCurrency: { type: String, required: false },
    payments: { type: Array, required: false, default: [] },
    paymentWait_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    paymentWait_date: { type: Date, required: false },
    paymentWait_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    be_priceStandby_time: { type: Date, required: false },
    priceStandby_date: { type: Date, required: false },
    priceStandby_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    confirm_date: { type: Date, required: false },
    confirm_user: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    statusCalendarEvent: { type: String, required: false },
    meetingCalendarEvent: { type: String, required: false },
    welcomeCalendarEvent: { type: String, required: false },
    transferCalendarEvent: { type: String, required: false },
    preConsCalendarEvent: { type: String, required: false },
    nurseCalendarEvent: { type: String, required: false },
    landing_date: { type: Date, required: false },
    welcome_date: { type: Date, required: false },
    welcome_staff: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    firstTransfer_date: { type: Date, required: false },
    firstTransferPlace: { type: String, required: false },
    firstTransferCar: { type: String, required: false },
    preTest_date: { type: Date, required: false },
    preCons_date: { type: Date, required: false },
    preCons_staff: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    operation_date: { type: Date, required: false },
    nurse_date: { type: Date, required: false },
    nurse_staff: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    customTimeLineUnits: { type: Object, required: false },
    onamCheck: { type: Boolean, default: false },
    passportCheck: { type: Boolean, default: false },
    operationCheck: { type: Boolean, default: false },
    videoCheck: { type: Boolean, default: false },
    medicineCheck: { type: Boolean, default: false },
    flightCheck: { type: Boolean, default: false },
    checkout_date: { type: Date, required: false },
    appointments: { type: Array, required: false, default: [] },

    checkout_transfer_staff: {
      type: mongoose.Schema.Types.ObjectId,
      required: false,
      ref: "Admin",
    },
    images: { type: Array, required: false, default: [] },
  },
  { timestamps: true }
);

export const Request = mongoose.model("Request", RequestSchema);

export default {
  Request,
};
